//
// SubaccountAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class SubaccountAPI {
    /**
     Delete a subaccount
     
     - parameter subaccountId: (path) ID of subaccount to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subaccountsBySubaccountIdDelete(subaccountId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        subaccountsBySubaccountIdDeleteWithRequestBuilder(subaccountId: subaccountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete a subaccount
     - DELETE /subaccounts/{subaccount_id}
     - Delete a subaccount
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter subaccountId: (path) ID of subaccount to delete 

     - returns: RequestBuilder<String> 
     */
    open class func subaccountsBySubaccountIdDeleteWithRequestBuilder(subaccountId: Int) -> RequestBuilder<String> {
        var path = "/subaccounts/{subaccount_id}"
        let subaccountIdPreEscape = "\(subaccountId)"
        let subaccountIdPostEscape = subaccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subaccount_id}", with: subaccountIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get specific subaccount
     
     - parameter subaccountId: (path) ID of subaccount to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subaccountsBySubaccountIdGet(subaccountId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        subaccountsBySubaccountIdGetWithRequestBuilder(subaccountId: subaccountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get specific subaccount
     - GET /subaccounts/{subaccount_id}
     - Get specific subaccount
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter subaccountId: (path) ID of subaccount to get 

     - returns: RequestBuilder<String> 
     */
    open class func subaccountsBySubaccountIdGetWithRequestBuilder(subaccountId: Int) -> RequestBuilder<String> {
        var path = "/subaccounts/{subaccount_id}"
        let subaccountIdPreEscape = "\(subaccountId)"
        let subaccountIdPostEscape = subaccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subaccount_id}", with: subaccountIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update subaccount
     
     - parameter subaccountId: (path) ID of subaccount to update 
     - parameter subaccount: (body) Subaccount model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subaccountsBySubaccountIdPut(subaccountId: Int, subaccount: Subaccount, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        subaccountsBySubaccountIdPutWithRequestBuilder(subaccountId: subaccountId, subaccount: subaccount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update subaccount
     - PUT /subaccounts/{subaccount_id}
     - Update subaccount
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter subaccountId: (path) ID of subaccount to update 
     - parameter subaccount: (body) Subaccount model 

     - returns: RequestBuilder<String> 
     */
    open class func subaccountsBySubaccountIdPutWithRequestBuilder(subaccountId: Int, subaccount: Subaccount) -> RequestBuilder<String> {
        var path = "/subaccounts/{subaccount_id}"
        let subaccountIdPreEscape = "\(subaccountId)"
        let subaccountIdPostEscape = subaccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subaccount_id}", with: subaccountIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subaccount)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get all subaccounts
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subaccountsGet(page: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        subaccountsGetWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all subaccounts
     - GET /subaccounts
     - Get all subaccounts
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)

     - returns: RequestBuilder<String> 
     */
    open class func subaccountsGetWithRequestBuilder(page: Int? = nil, limit: Int? = nil) -> RequestBuilder<String> {
        let path = "/subaccounts"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create new subaccount
     
     - parameter subaccount: (body) Subaccount model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subaccountsPost(subaccount: Subaccount, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        subaccountsPostWithRequestBuilder(subaccount: subaccount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new subaccount
     - POST /subaccounts
     - Create new subaccount
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter subaccount: (body) Subaccount model 

     - returns: RequestBuilder<String> 
     */
    open class func subaccountsPostWithRequestBuilder(subaccount: Subaccount) -> RequestBuilder<String> {
        let path = "/subaccounts"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: subaccount)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Regenerate an API Key
     
     - parameter subaccountId: (path) ID of subaccount to regenerate API key for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func subaccountsRegenApiKeyBySubaccountIdPut(subaccountId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        subaccountsRegenApiKeyBySubaccountIdPutWithRequestBuilder(subaccountId: subaccountId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Regenerate an API Key
     - PUT /subaccounts/{subaccount_id}/regen-api-key
     - Regenerate an API Key
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter subaccountId: (path) ID of subaccount to regenerate API key for 

     - returns: RequestBuilder<String> 
     */
    open class func subaccountsRegenApiKeyBySubaccountIdPutWithRequestBuilder(subaccountId: Int) -> RequestBuilder<String> {
        var path = "/subaccounts/{subaccount_id}/regen-api-key"
        let subaccountIdPreEscape = "\(subaccountId)"
        let subaccountIdPostEscape = subaccountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subaccount_id}", with: subaccountIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
