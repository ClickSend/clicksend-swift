//
// AccountRechargeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AccountRechargeAPI {
    /**
     Get Credit Card info
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rechargeCreditCardGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        rechargeCreditCardGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Credit Card info
     - GET /recharge/credit-card
     - Get Credit Card info
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func rechargeCreditCardGetWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/recharge/credit-card"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update credit card info
     
     - parameter creditCard: (body) CreditCard model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rechargeCreditCardPut(creditCard: CreditCard, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        rechargeCreditCardPutWithRequestBuilder(creditCard: creditCard).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update credit card info
     - PUT /recharge/credit-card
     - Update credit card info
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter creditCard: (body) CreditCard model 

     - returns: RequestBuilder<String> 
     */
    open class func rechargeCreditCardPutWithRequestBuilder(creditCard: CreditCard) -> RequestBuilder<String> {
        let path = "/recharge/credit-card"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditCard)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get list of all packages
     
     - parameter country: (query) Country code (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rechargePackagesGet(country: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        rechargePackagesGetWithRequestBuilder(country: country).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get list of all packages
     - GET /recharge/packages
     - Get list of all packages
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter country: (query) Country code (optional)

     - returns: RequestBuilder<String> 
     */
    open class func rechargePackagesGetWithRequestBuilder(country: String? = nil) -> RequestBuilder<String> {
        let path = "/recharge/packages"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "country": country
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Purchase a package
     
     - parameter packageId: (path) ID of package to purchase 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rechargePurchaseByPackageIdPut(packageId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        rechargePurchaseByPackageIdPutWithRequestBuilder(packageId: packageId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Purchase a package
     - PUT /recharge/purchase/{package_id}
     - Purchase a package
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter packageId: (path) ID of package to purchase 

     - returns: RequestBuilder<String> 
     */
    open class func rechargePurchaseByPackageIdPutWithRequestBuilder(packageId: Int) -> RequestBuilder<String> {
        var path = "/recharge/purchase/{package_id}"
        let packageIdPreEscape = "\(packageId)"
        let packageIdPostEscape = packageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{package_id}", with: packageIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get specific Transaction
     
     - parameter transactionId: (path) ID of transaction to retrieve 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rechargeTransactionsByTransactionIdGet(transactionId: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        rechargeTransactionsByTransactionIdGetWithRequestBuilder(transactionId: transactionId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get specific Transaction
     - GET /recharge/transactions/{transaction_id}
     - Get specific Transaction
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter transactionId: (path) ID of transaction to retrieve 

     - returns: RequestBuilder<String> 
     */
    open class func rechargeTransactionsByTransactionIdGetWithRequestBuilder(transactionId: String) -> RequestBuilder<String> {
        var path = "/recharge/transactions/{transaction_id}"
        let transactionIdPreEscape = "\(transactionId)"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transaction_id}", with: transactionIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Purchase a package
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rechargeTransactionsGet(page: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        rechargeTransactionsGetWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Purchase a package
     - GET /recharge/transactions
     - Get all transactions
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)

     - returns: RequestBuilder<String> 
     */
    open class func rechargeTransactionsGetWithRequestBuilder(page: Int? = nil, limit: Int? = nil) -> RequestBuilder<String> {
        let path = "/recharge/transactions"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
