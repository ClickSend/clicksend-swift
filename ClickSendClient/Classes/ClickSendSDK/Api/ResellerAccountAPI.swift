//
// ResellerAccountAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ResellerAccountAPI {
    /**
     Get Reseller clients Account
     
     - parameter clientUserId: (path) User ID of client 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resellerAccountsByClientUserIdGet(clientUserId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        resellerAccountsByClientUserIdGetWithRequestBuilder(clientUserId: clientUserId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Reseller clients Account
     - GET /reseller/accounts/{client_user_id}
     - Get Reseller clients Account
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter clientUserId: (path) User ID of client 

     - returns: RequestBuilder<String> 
     */
    open class func resellerAccountsByClientUserIdGetWithRequestBuilder(clientUserId: Int) -> RequestBuilder<String> {
        var path = "/reseller/accounts/{client_user_id}"
        let clientUserIdPreEscape = "\(clientUserId)"
        let clientUserIdPostEscape = clientUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{client_user_id}", with: clientUserIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Reseller clients Account
     
     - parameter clientUserId: (path) User ID of client 
     - parameter resellerAccount: (body) ResellerAccount model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resellerAccountsByClientUserIdPut(clientUserId: Int, resellerAccount: ResellerAccount, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        resellerAccountsByClientUserIdPutWithRequestBuilder(clientUserId: clientUserId, resellerAccount: resellerAccount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update Reseller clients Account
     - PUT /reseller/accounts/{client_user_id}
     - Update Reseller clients Account
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter clientUserId: (path) User ID of client 
     - parameter resellerAccount: (body) ResellerAccount model 

     - returns: RequestBuilder<String> 
     */
    open class func resellerAccountsByClientUserIdPutWithRequestBuilder(clientUserId: Int, resellerAccount: ResellerAccount) -> RequestBuilder<String> {
        var path = "/reseller/accounts/{client_user_id}"
        let clientUserIdPreEscape = "\(clientUserId)"
        let clientUserIdPostEscape = clientUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{client_user_id}", with: clientUserIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: resellerAccount)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get list of reseller accounts
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resellerAccountsGet(page: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        resellerAccountsGetWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get list of reseller accounts
     - GET /reseller/accounts
     - Get list of reseller accounts
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)

     - returns: RequestBuilder<String> 
     */
    open class func resellerAccountsGetWithRequestBuilder(page: Int? = nil, limit: Int? = nil) -> RequestBuilder<String> {
        let path = "/reseller/accounts"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create reseller account
     
     - parameter resellerAccount: (body) ResellerAccount model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resellerAccountsPost(resellerAccount: ResellerAccount, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        resellerAccountsPostWithRequestBuilder(resellerAccount: resellerAccount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create reseller account
     - POST /reseller/accounts
     - Create reseller account
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter resellerAccount: (body) ResellerAccount model 

     - returns: RequestBuilder<String> 
     */
    open class func resellerAccountsPostWithRequestBuilder(resellerAccount: ResellerAccount) -> RequestBuilder<String> {
        let path = "/reseller/accounts"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: resellerAccount)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
