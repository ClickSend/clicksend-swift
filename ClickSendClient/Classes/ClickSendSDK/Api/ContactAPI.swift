//
// ContactAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ContactAPI {
    /**
     Delete a contact
     
     - parameter listId: (path) List ID 
     - parameter contactId: (path) Contact ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsContactsByListIdAndContactIdDelete(listId: Int, contactId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsContactsByListIdAndContactIdDeleteWithRequestBuilder(listId: listId, contactId: contactId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete a contact
     - DELETE /lists/{list_id}/contacts/{contact_id}
     - Delete a contact
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter listId: (path) List ID 
     - parameter contactId: (path) Contact ID 

     - returns: RequestBuilder<String> 
     */
    open class func listsContactsByListIdAndContactIdDeleteWithRequestBuilder(listId: Int, contactId: Int) -> RequestBuilder<String> {
        var path = "/lists/{list_id}/contacts/{contact_id}"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contact_id}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a specific contact
     
     - parameter listId: (path) Your contact list id you want to access. 
     - parameter contactId: (path) Your contact id you want to access. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsContactsByListIdAndContactIdGet(listId: Int, contactId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsContactsByListIdAndContactIdGetWithRequestBuilder(listId: listId, contactId: contactId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a specific contact
     - GET /lists/{list_id}/contacts/{contact_id}
     - Get a specific contact
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter listId: (path) Your contact list id you want to access. 
     - parameter contactId: (path) Your contact id you want to access. 

     - returns: RequestBuilder<String> 
     */
    open class func listsContactsByListIdAndContactIdGetWithRequestBuilder(listId: Int, contactId: Int) -> RequestBuilder<String> {
        var path = "/lists/{list_id}/contacts/{contact_id}"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contact_id}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update specific contact
     
     - parameter listId: (path) Contact list id 
     - parameter contactId: (path) Contact ID 
     - parameter contact: (body) Contact model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsContactsByListIdAndContactIdPut(listId: Int, contactId: Int, contact: Contact, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsContactsByListIdAndContactIdPutWithRequestBuilder(listId: listId, contactId: contactId, contact: contact).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update specific contact
     - PUT /lists/{list_id}/contacts/{contact_id}
     - Update specific contact
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter listId: (path) Contact list id 
     - parameter contactId: (path) Contact ID 
     - parameter contact: (body) Contact model 

     - returns: RequestBuilder<String> 
     */
    open class func listsContactsByListIdAndContactIdPutWithRequestBuilder(listId: Int, contactId: Int, contact: Contact) -> RequestBuilder<String> {
        var path = "/lists/{list_id}/contacts/{contact_id}"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contact_id}", with: contactIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: contact)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get all contacts in a list
     
     - parameter listId: (path) Contact list ID 
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsContactsByListIdGet(listId: Int, page: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsContactsByListIdGetWithRequestBuilder(listId: listId, page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all contacts in a list
     - GET /lists/{list_id}/contacts
     - Get all contacts in a list
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter listId: (path) Contact list ID 
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)

     - returns: RequestBuilder<String> 
     */
    open class func listsContactsByListIdGetWithRequestBuilder(listId: Int, page: Int? = nil, limit: Int? = nil) -> RequestBuilder<String> {
        var path = "/lists/{list_id}/contacts"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create new contact
     
     - parameter contact: (body) Contact model 
     - parameter listId: (path) List id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsContactsByListIdPost(contact: Contact, listId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsContactsByListIdPostWithRequestBuilder(contact: contact, listId: listId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new contact
     - POST /lists/{list_id}/contacts
     - Create new contact
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter contact: (body) Contact model 
     - parameter listId: (path) List id 

     - returns: RequestBuilder<String> 
     */
    open class func listsContactsByListIdPostWithRequestBuilder(contact: Contact, listId: Int) -> RequestBuilder<String> {
        var path = "/lists/{list_id}/contacts"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: contact)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Copy contact to another list
     
     - parameter fromListId: (path) List ID for list that contains contact. 
     - parameter contactId: (path) Contact ID 
     - parameter toListId: (path) List ID for list you want to copy the contact to. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsCopyContactPut(fromListId: Int, contactId: Int, toListId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsCopyContactPutWithRequestBuilder(fromListId: fromListId, contactId: contactId, toListId: toListId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Copy contact to another list
     - PUT /lists/{from_list_id}/contacts/{contact_id}/copy/{to_list_id}
     - Copy contact to another list
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter fromListId: (path) List ID for list that contains contact. 
     - parameter contactId: (path) Contact ID 
     - parameter toListId: (path) List ID for list you want to copy the contact to. 

     - returns: RequestBuilder<String> 
     */
    open class func listsCopyContactPutWithRequestBuilder(fromListId: Int, contactId: Int, toListId: Int) -> RequestBuilder<String> {
        var path = "/lists/{from_list_id}/contacts/{contact_id}/copy/{to_list_id}"
        let fromListIdPreEscape = "\(fromListId)"
        let fromListIdPostEscape = fromListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{from_list_id}", with: fromListIdPostEscape, options: .literal, range: nil)
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contact_id}", with: contactIdPostEscape, options: .literal, range: nil)
        let toListIdPreEscape = "\(toListId)"
        let toListIdPostEscape = toListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{to_list_id}", with: toListIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove all opted out contacts
     
     - parameter listId: (path) Your list id 
     - parameter optOutListId: (path) Your opt out list id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsRemoveOptedOutContactsByListIdAndOptOutListIdPut(listId: Int, optOutListId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsRemoveOptedOutContactsByListIdAndOptOutListIdPutWithRequestBuilder(listId: listId, optOutListId: optOutListId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Remove all opted out contacts
     - PUT /lists/{list_id}/remove-opted-out-contacts/{opt_out_list_id}
     - Remove all opted out contacts
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter listId: (path) Your list id 
     - parameter optOutListId: (path) Your opt out list id 

     - returns: RequestBuilder<String> 
     */
    open class func listsRemoveOptedOutContactsByListIdAndOptOutListIdPutWithRequestBuilder(listId: Int, optOutListId: Int) -> RequestBuilder<String> {
        var path = "/lists/{list_id}/remove-opted-out-contacts/{opt_out_list_id}"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let optOutListIdPreEscape = "\(optOutListId)"
        let optOutListIdPostEscape = optOutListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{opt_out_list_id}", with: optOutListIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Transfer contact to another list
     
     - parameter fromListId: (path) List ID for list that contains contact. 
     - parameter contactId: (path) Contact ID 
     - parameter toListId: (path) List ID for list you want to transfer contact to. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsTransferContactPut(fromListId: Int, contactId: Int, toListId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsTransferContactPutWithRequestBuilder(fromListId: fromListId, contactId: contactId, toListId: toListId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Transfer contact to another list
     - PUT /lists/{from_list_id}/contacts/{contact_id}/transfer/{to_list_id}
     - Transfer contact to another list
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter fromListId: (path) List ID for list that contains contact. 
     - parameter contactId: (path) Contact ID 
     - parameter toListId: (path) List ID for list you want to transfer contact to. 

     - returns: RequestBuilder<String> 
     */
    open class func listsTransferContactPutWithRequestBuilder(fromListId: Int, contactId: Int, toListId: Int) -> RequestBuilder<String> {
        var path = "/lists/{from_list_id}/contacts/{contact_id}/transfer/{to_list_id}"
        let fromListIdPreEscape = "\(fromListId)"
        let fromListIdPostEscape = fromListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{from_list_id}", with: fromListIdPostEscape, options: .literal, range: nil)
        let contactIdPreEscape = "\(contactId)"
        let contactIdPostEscape = contactIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{contact_id}", with: contactIdPostEscape, options: .literal, range: nil)
        let toListIdPreEscape = "\(toListId)"
        let toListIdPostEscape = toListIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{to_list_id}", with: toListIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
