//
// ContactListAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ContactListAPI {
    /**
     ListsByListIdDelete
     
     - parameter listId: (path) List ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsByListIdDelete(listId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsByListIdDeleteWithRequestBuilder(listId: listId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     ListsByListIdDelete
     - DELETE /lists/{list_id}
     - Delete a specific contact list
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter listId: (path) List ID 

     - returns: RequestBuilder<String> 
     */
    open class func listsByListIdDeleteWithRequestBuilder(listId: Int) -> RequestBuilder<String> {
        var path = "/lists/{list_id}"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get specific contact list
     
     - parameter listId: (path) List ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsByListIdGet(listId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsByListIdGetWithRequestBuilder(listId: listId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get specific contact list
     - GET /lists/{list_id}
     - Get specific contact list
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter listId: (path) List ID 

     - returns: RequestBuilder<String> 
     */
    open class func listsByListIdGetWithRequestBuilder(listId: Int) -> RequestBuilder<String> {
        var path = "/lists/{list_id}"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update specific contact list
     
     - parameter listId: (path) Your list id 
     - parameter contactList: (body) Contact list model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsByListIdPut(listId: Int, contactList: ContactList, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsByListIdPutWithRequestBuilder(listId: listId, contactList: contactList).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update specific contact list
     - PUT /lists/{list_id}
     - Update specific contact list
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter listId: (path) Your list id 
     - parameter contactList: (body) Contact list model 

     - returns: RequestBuilder<String> 
     */
    open class func listsByListIdPutWithRequestBuilder(listId: Int, contactList: ContactList) -> RequestBuilder<String> {
        var path = "/lists/{list_id}"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: contactList)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get all contact lists
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsGet(page: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsGetWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all contact lists
     - GET /lists
     - Get all contact lists
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)

     - returns: RequestBuilder<String> 
     */
    open class func listsGetWithRequestBuilder(page: Int? = nil, limit: Int? = nil) -> RequestBuilder<String> {
        let path = "/lists"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Import contacts to list
     
     - parameter listId: (path) Your contact list id you want to access. 
     - parameter file: (body) ContactListImport model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsImportByListIdPost(listId: Int, file: ContactListImport, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsImportByListIdPostWithRequestBuilder(listId: listId, file: file).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Import contacts to list
     - POST /lists/{list_id}/import
     - Import contacts to list
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter listId: (path) Your contact list id you want to access. 
     - parameter file: (body) ContactListImport model 

     - returns: RequestBuilder<String> 
     */
    open class func listsImportByListIdPostWithRequestBuilder(listId: Int, file: ContactListImport) -> RequestBuilder<String> {
        var path = "/lists/{list_id}/import"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: file)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create new contact list
     
     - parameter contactList: (body) Contact list model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsPost(contactList: ContactList, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsPostWithRequestBuilder(contactList: contactList).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create new contact list
     - POST /lists
     - Create new contact list
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter contactList: (body) Contact list model 

     - returns: RequestBuilder<String> 
     */
    open class func listsPostWithRequestBuilder(contactList: ContactList) -> RequestBuilder<String> {
        let path = "/lists"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: contactList)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove duplicate contacts
     
     - parameter listId: (path) Your list id 
     - parameter fields: (body) Fields model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listsRemoveDuplicatesByListIdPut(listId: Int, fields: Fields, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        listsRemoveDuplicatesByListIdPutWithRequestBuilder(listId: listId, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Remove duplicate contacts
     - PUT /lists/{list_id}/remove-duplicates
     - Remove duplicate contacts
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter listId: (path) Your list id 
     - parameter fields: (body) Fields model 

     - returns: RequestBuilder<String> 
     */
    open class func listsRemoveDuplicatesByListIdPutWithRequestBuilder(listId: Int, fields: Fields) -> RequestBuilder<String> {
        var path = "/lists/{list_id}/remove-duplicates"
        let listIdPreEscape = "\(listId)"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: fields)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
