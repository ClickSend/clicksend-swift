//
// TransactionalEmailAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TransactionalEmailAPI {
    /**
     Export all Transactional Email history
     
     - parameter filename: (query) Filename to download history as 
     - parameter dateFrom: (query) Start date (optional)
     - parameter dateTo: (query) End date (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emailHistoryExportGet(filename: String, dateFrom: Int? = nil, dateTo: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        emailHistoryExportGetWithRequestBuilder(filename: filename, dateFrom: dateFrom, dateTo: dateTo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Export all Transactional Email history
     - GET /email/history/export
     - Export all Transactional Email history
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter filename: (query) Filename to download history as 
     - parameter dateFrom: (query) Start date (optional)
     - parameter dateTo: (query) End date (optional)

     - returns: RequestBuilder<String> 
     */
    open class func emailHistoryExportGetWithRequestBuilder(filename: String, dateFrom: Int? = nil, dateTo: Int? = nil) -> RequestBuilder<String> {
        let path = "/email/history/export"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filename": filename, 
            "date_from": dateFrom?.encodeToJSON(), 
            "date_to": dateTo?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all transactional email history
     
     - parameter dateFrom: (query) Start date (optional)
     - parameter dateTo: (query) End date (optional)
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emailHistoryGet(dateFrom: Int? = nil, dateTo: Int? = nil, page: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        emailHistoryGetWithRequestBuilder(dateFrom: dateFrom, dateTo: dateTo, page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all transactional email history
     - GET /email/history
     - Get all transactional email history
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter dateFrom: (query) Start date (optional)
     - parameter dateTo: (query) End date (optional)
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)

     - returns: RequestBuilder<String> 
     */
    open class func emailHistoryGetWithRequestBuilder(dateFrom: Int? = nil, dateTo: Int? = nil, page: Int? = nil, limit: Int? = nil) -> RequestBuilder<String> {
        let path = "/email/history"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "date_from": dateFrom?.encodeToJSON(), 
            "date_to": dateTo?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get transactional email price
     
     - parameter email: (body) Email model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emailPricePost(email: Email, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        emailPricePostWithRequestBuilder(email: email).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get transactional email price
     - POST /email/price
     - Get transactional email price
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter email: (body) Email model 

     - returns: RequestBuilder<String> 
     */
    open class func emailPricePostWithRequestBuilder(email: Email) -> RequestBuilder<String> {
        let path = "/email/price"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: email)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Send transactional email
     
     - parameter email: (body) Email model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emailSendPost(email: Email, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        emailSendPostWithRequestBuilder(email: email).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Send transactional email
     - POST /email/send
     - Send transactional email
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter email: (body) Email model 

     - returns: RequestBuilder<String> 
     */
    open class func emailSendPostWithRequestBuilder(email: Email) -> RequestBuilder<String> {
        let path = "/email/send"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: email)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
