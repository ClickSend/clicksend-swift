//
// VoiceDeliveryReceiptRulesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class VoiceDeliveryReceiptRulesAPI {
    /**
     Delete voice delivery receipt automation
     
     - parameter receiptRuleId: (path) Receipt rule id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func voiceDeliveryReceiptAutomationDelete(receiptRuleId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        voiceDeliveryReceiptAutomationDeleteWithRequestBuilder(receiptRuleId: receiptRuleId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete voice delivery receipt automation
     - DELETE /automations/voice/receipts/{receipt_rule_id}
     - Delete voice delivery receipt automation
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter receiptRuleId: (path) Receipt rule id 

     - returns: RequestBuilder<String> 
     */
    open class func voiceDeliveryReceiptAutomationDeleteWithRequestBuilder(receiptRuleId: Int) -> RequestBuilder<String> {
        var path = "/automations/voice/receipts/{receipt_rule_id}"
        let receiptRuleIdPreEscape = "\(receiptRuleId)"
        let receiptRuleIdPostEscape = receiptRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{receipt_rule_id}", with: receiptRuleIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get specific voice delivery receipt automation
     
     - parameter receiptRuleId: (path) Receipt rule id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func voiceDeliveryReceiptAutomationGet(receiptRuleId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        voiceDeliveryReceiptAutomationGetWithRequestBuilder(receiptRuleId: receiptRuleId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get specific voice delivery receipt automation
     - GET /automations/voice/receipts/{receipt_rule_id}
     - Get specific voice delivery receipt automation
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter receiptRuleId: (path) Receipt rule id 

     - returns: RequestBuilder<String> 
     */
    open class func voiceDeliveryReceiptAutomationGetWithRequestBuilder(receiptRuleId: Int) -> RequestBuilder<String> {
        var path = "/automations/voice/receipts/{receipt_rule_id}"
        let receiptRuleIdPreEscape = "\(receiptRuleId)"
        let receiptRuleIdPostEscape = receiptRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{receipt_rule_id}", with: receiptRuleIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create voice delivery receipt automations
     
     - parameter deliveryReceiptRule: (body) voice delivery receipt rule model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func voiceDeliveryReceiptAutomationPost(deliveryReceiptRule: DeliveryReceiptRule, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        voiceDeliveryReceiptAutomationPostWithRequestBuilder(deliveryReceiptRule: deliveryReceiptRule).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create voice delivery receipt automations
     - POST /automations/voice/receipts
     - Create voice delivery receipt automations
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter deliveryReceiptRule: (body) voice delivery receipt rule model 

     - returns: RequestBuilder<String> 
     */
    open class func voiceDeliveryReceiptAutomationPostWithRequestBuilder(deliveryReceiptRule: DeliveryReceiptRule) -> RequestBuilder<String> {
        let path = "/automations/voice/receipts"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deliveryReceiptRule)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update voice delivery receipt automation
     
     - parameter receiptRuleId: (path) Receipt rule id 
     - parameter deliveryReceiptRule: (body) Delivery receipt rule model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func voiceDeliveryReceiptAutomationPut(receiptRuleId: Int, deliveryReceiptRule: DeliveryReceiptRule, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        voiceDeliveryReceiptAutomationPutWithRequestBuilder(receiptRuleId: receiptRuleId, deliveryReceiptRule: deliveryReceiptRule).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update voice delivery receipt automation
     - PUT /automations/voice/receipts/{receipt_rule_id}
     - Update voice delivery receipt automation
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter receiptRuleId: (path) Receipt rule id 
     - parameter deliveryReceiptRule: (body) Delivery receipt rule model 

     - returns: RequestBuilder<String> 
     */
    open class func voiceDeliveryReceiptAutomationPutWithRequestBuilder(receiptRuleId: Int, deliveryReceiptRule: DeliveryReceiptRule) -> RequestBuilder<String> {
        var path = "/automations/voice/receipts/{receipt_rule_id}"
        let receiptRuleIdPreEscape = "\(receiptRuleId)"
        let receiptRuleIdPostEscape = receiptRuleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{receipt_rule_id}", with: receiptRuleIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deliveryReceiptRule)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get all voice delivery receipt automations
     
     - parameter q: (query) Your keyword or query. (optional)
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func voiceDeliveryReceiptAutomationsGet(q: String? = nil, page: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        voiceDeliveryReceiptAutomationsGetWithRequestBuilder(q: q, page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all voice delivery receipt automations
     - GET /automations/voice/receipts
     - Get all voice delivery receipt automations
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter q: (query) Your keyword or query. (optional)
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)

     - returns: RequestBuilder<String> 
     */
    open class func voiceDeliveryReceiptAutomationsGetWithRequestBuilder(q: String? = nil, page: Int? = nil, limit: Int? = nil) -> RequestBuilder<String> {
        let path = "/automations/voice/receipts"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q, 
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
