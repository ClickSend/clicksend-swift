//
// NumberAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class NumberAPI {
    /**
     Buy dedicated number
     
     - parameter dedicatedNumber: (path) Phone number to purchase 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func numbersBuyByDedicatedNumberPost(dedicatedNumber: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        numbersBuyByDedicatedNumberPostWithRequestBuilder(dedicatedNumber: dedicatedNumber).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Buy dedicated number
     - POST /numbers/buy/{dedicated_number}
     - Buy dedicated number
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter dedicatedNumber: (path) Phone number to purchase 

     - returns: RequestBuilder<String> 
     */
    open class func numbersBuyByDedicatedNumberPostWithRequestBuilder(dedicatedNumber: String) -> RequestBuilder<String> {
        var path = "/numbers/buy/{dedicated_number}"
        let dedicatedNumberPreEscape = "\(dedicatedNumber)"
        let dedicatedNumberPostEscape = dedicatedNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dedicated_number}", with: dedicatedNumberPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all availible dedicated numbers
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func numbersGet(page: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        numbersGetWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all availible dedicated numbers
     - GET /numbers
     - Get all availible dedicated numbers
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)

     - returns: RequestBuilder<String> 
     */
    open class func numbersGetWithRequestBuilder(page: Int? = nil, limit: Int? = nil) -> RequestBuilder<String> {
        let path = "/numbers"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all dedicated numbers by country
     
     - parameter country: (path) Country code to search 
     - parameter search: (query) Your search pattern or query. (optional)
     - parameter searchType: (query) Your strategy for searching, 0 &#x3D; starts with, 1 &#x3D; anywhere, 2 &#x3D; ends with. (optional)
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func numbersSearchByCountryGet(country: String, search: String? = nil, searchType: Int? = nil, page: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        numbersSearchByCountryGetWithRequestBuilder(country: country, search: search, searchType: searchType, page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all dedicated numbers by country
     - GET /numbers/search/{country}
     - Get all dedicated numbers by country
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter country: (path) Country code to search 
     - parameter search: (query) Your search pattern or query. (optional)
     - parameter searchType: (query) Your strategy for searching, 0 &#x3D; starts with, 1 &#x3D; anywhere, 2 &#x3D; ends with. (optional)
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)

     - returns: RequestBuilder<String> 
     */
    open class func numbersSearchByCountryGetWithRequestBuilder(country: String, search: String? = nil, searchType: Int? = nil, page: Int? = nil, limit: Int? = nil) -> RequestBuilder<String> {
        var path = "/numbers/search/{country}"
        let countryPreEscape = "\(country)"
        let countryPostEscape = countryPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{country}", with: countryPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "search": search, 
            "search_type": searchType?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
