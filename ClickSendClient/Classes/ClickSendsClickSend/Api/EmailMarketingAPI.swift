//
// EmailMarketingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class EmailMarketingAPI {
    /**
     Get all email addresses
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allowedEmailAddressGet(page: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        allowedEmailAddressGetWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all email addresses
     - GET /email/addresses
     - Get all email addresses
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)

     - returns: RequestBuilder<String> 
     */
    open class func allowedEmailAddressGetWithRequestBuilder(page: Int? = nil, limit: Int? = nil) -> RequestBuilder<String> {
        let path = "/email/addresses"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create allowed Email Address
     
     - parameter emailAddress: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allowedEmailAddressPost(emailAddress: EmailAddress? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        allowedEmailAddressPostWithRequestBuilder(emailAddress: emailAddress).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create allowed Email Address
     - POST /email/addresses
     - Create allowed Email Address
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emailAddress: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func allowedEmailAddressPostWithRequestBuilder(emailAddress: EmailAddress? = nil) -> RequestBuilder<String> {
        let path = "/email/addresses"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailAddress)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Cancel email campaign
     
     - parameter emailCampaignId: (path) Allowed email campaign id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelEmailCampaignPut(emailCampaignId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        cancelEmailCampaignPutWithRequestBuilder(emailCampaignId: emailCampaignId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Cancel email campaign
     - PUT /email-campaigns/{email_campaign_id}/cancel
     - Cancel email campaign
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emailCampaignId: (path) Allowed email campaign id 

     - returns: RequestBuilder<String> 
     */
    open class func cancelEmailCampaignPutWithRequestBuilder(emailCampaignId: Int) -> RequestBuilder<String> {
        var path = "/email-campaigns/{email_campaign_id}/cancel"
        let emailCampaignIdPreEscape = "\(emailCampaignId)"
        let emailCampaignIdPostEscape = emailCampaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email_campaign_id}", with: emailCampaignIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get specific email campaign
     
     - parameter emailCampaignId: (path) Allowed email campaign id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emailCampaignGet(emailCampaignId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        emailCampaignGetWithRequestBuilder(emailCampaignId: emailCampaignId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get specific email campaign
     - GET /email-campaigns/{email_campaign_id}
     - Get specific email campaign
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emailCampaignId: (path) Allowed email campaign id 

     - returns: RequestBuilder<String> 
     */
    open class func emailCampaignGetWithRequestBuilder(emailCampaignId: Int) -> RequestBuilder<String> {
        var path = "/email-campaigns/{email_campaign_id}"
        let emailCampaignIdPreEscape = "\(emailCampaignId)"
        let emailCampaignIdPostEscape = emailCampaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email_campaign_id}", with: emailCampaignIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Export specific email campaign history
     
     - parameter emailCampaignId: (path) Allowed email campaign id 
     - parameter dateFrom: (query) Start date (optional)
     - parameter dateTo: (query) End date (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emailCampaignHistoryExportGet(emailCampaignId: Int, dateFrom: Int? = nil, dateTo: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        emailCampaignHistoryExportGetWithRequestBuilder(emailCampaignId: emailCampaignId, dateFrom: dateFrom, dateTo: dateTo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Export specific email campaign history
     - GET /email-campaigns/{email_campaign_id}/history/export
     - Export specific email campaign history
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emailCampaignId: (path) Allowed email campaign id 
     - parameter dateFrom: (query) Start date (optional)
     - parameter dateTo: (query) End date (optional)

     - returns: RequestBuilder<String> 
     */
    open class func emailCampaignHistoryExportGetWithRequestBuilder(emailCampaignId: Int, dateFrom: Int? = nil, dateTo: Int? = nil) -> RequestBuilder<String> {
        var path = "/email-campaigns/{email_campaign_id}/history/export"
        let emailCampaignIdPreEscape = "\(emailCampaignId)"
        let emailCampaignIdPostEscape = emailCampaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email_campaign_id}", with: emailCampaignIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "date_from": dateFrom?.encodeToJSON(), 
            "date_to": dateTo?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get specific email campaign history
     
     - parameter emailCampaignId: (path) Allowed email campaign id 
     - parameter dateFrom: (query) Start date (optional)
     - parameter dateTo: (query) End date (optional)
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emailCampaignHistoryGet(emailCampaignId: Int, dateFrom: Int? = nil, dateTo: Int? = nil, page: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        emailCampaignHistoryGetWithRequestBuilder(emailCampaignId: emailCampaignId, dateFrom: dateFrom, dateTo: dateTo, page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get specific email campaign history
     - GET /email-campaigns/{email_campaign_id}/history
     - Get specific email campaign history
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emailCampaignId: (path) Allowed email campaign id 
     - parameter dateFrom: (query) Start date (optional)
     - parameter dateTo: (query) End date (optional)
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)

     - returns: RequestBuilder<String> 
     */
    open class func emailCampaignHistoryGetWithRequestBuilder(emailCampaignId: Int, dateFrom: Int? = nil, dateTo: Int? = nil, page: Int? = nil, limit: Int? = nil) -> RequestBuilder<String> {
        var path = "/email-campaigns/{email_campaign_id}/history"
        let emailCampaignIdPreEscape = "\(emailCampaignId)"
        let emailCampaignIdPostEscape = emailCampaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email_campaign_id}", with: emailCampaignIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "date_from": dateFrom?.encodeToJSON(), 
            "date_to": dateTo?.encodeToJSON(), 
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Send email campaign
     
     - parameter emailCampaign: (body) Email model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emailCampaignPost(emailCampaign: EmailCampaign, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        emailCampaignPostWithRequestBuilder(emailCampaign: emailCampaign).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Send email campaign
     - POST /email-campaigns/send
     - Send email campaign
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emailCampaign: (body) Email model 

     - returns: RequestBuilder<String> 
     */
    open class func emailCampaignPostWithRequestBuilder(emailCampaign: EmailCampaign) -> RequestBuilder<String> {
        let path = "/email-campaigns/send"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailCampaign)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Calculate email campaign price
     
     - parameter emailCampaign: (body) Email model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emailCampaignPricePost(emailCampaign: EmailCampaign, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        emailCampaignPricePostWithRequestBuilder(emailCampaign: emailCampaign).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Calculate email campaign price
     - POST /email-campaigns/price
     - Calculate email campaign price
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emailCampaign: (body) Email model 

     - returns: RequestBuilder<String> 
     */
    open class func emailCampaignPricePostWithRequestBuilder(emailCampaign: EmailCampaign) -> RequestBuilder<String> {
        let path = "/email-campaigns/price"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailCampaign)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Edit email campaign
     
     - parameter emailCampaignId: (path) Allowed email campaign id 
     - parameter emailCampaign: (body) Email model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emailCampaignPut(emailCampaignId: Int, emailCampaign: EmailCampaign, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        emailCampaignPutWithRequestBuilder(emailCampaignId: emailCampaignId, emailCampaign: emailCampaign).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Edit email campaign
     - PUT /email-campaigns/{email_campaign_id}
     - Edit email campaign
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emailCampaignId: (path) Allowed email campaign id 
     - parameter emailCampaign: (body) Email model 

     - returns: RequestBuilder<String> 
     */
    open class func emailCampaignPutWithRequestBuilder(emailCampaignId: Int, emailCampaign: EmailCampaign) -> RequestBuilder<String> {
        var path = "/email-campaigns/{email_campaign_id}"
        let emailCampaignIdPreEscape = "\(emailCampaignId)"
        let emailCampaignIdPostEscape = emailCampaignIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email_campaign_id}", with: emailCampaignIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailCampaign)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get all email campaigns
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func emailCampaignsGet(page: Int? = nil, limit: Int? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        emailCampaignsGetWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all email campaigns
     - GET /email-campaigns
     - Get all email campaigns
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter page: (query) Page number (optional, default to 1)
     - parameter limit: (query) Number of records per page (optional, default to 10)

     - returns: RequestBuilder<String> 
     */
    open class func emailCampaignsGetWithRequestBuilder(page: Int? = nil, limit: Int? = nil) -> RequestBuilder<String> {
        let path = "/email-campaigns"
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Send verification token
     
     - parameter emailAddressId: (path) Allowed email address id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendVerificationTokenGet(emailAddressId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        sendVerificationTokenGetWithRequestBuilder(emailAddressId: emailAddressId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Send verification token
     - PUT /email/address-verify/{email_address_id}/send
     - Send verification token
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emailAddressId: (path) Allowed email address id 

     - returns: RequestBuilder<String> 
     */
    open class func sendVerificationTokenGetWithRequestBuilder(emailAddressId: Int) -> RequestBuilder<String> {
        var path = "/email/address-verify/{email_address_id}/send"
        let emailAddressIdPreEscape = "\(emailAddressId)"
        let emailAddressIdPostEscape = emailAddressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email_address_id}", with: emailAddressIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete specific email address
     
     - parameter emailAddressId: (path) Allowed email address id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func specificAllowedEmailAddressDelete(emailAddressId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        specificAllowedEmailAddressDeleteWithRequestBuilder(emailAddressId: emailAddressId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete specific email address
     - DELETE /email/addresses/{email_address_id}
     - Delete specific email address
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emailAddressId: (path) Allowed email address id 

     - returns: RequestBuilder<String> 
     */
    open class func specificAllowedEmailAddressDeleteWithRequestBuilder(emailAddressId: Int) -> RequestBuilder<String> {
        var path = "/email/addresses/{email_address_id}"
        let emailAddressIdPreEscape = "\(emailAddressId)"
        let emailAddressIdPostEscape = emailAddressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email_address_id}", with: emailAddressIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get specific email address
     
     - parameter emailAddressId: (path) Allowed email address id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func specificAllowedEmailAddressGet(emailAddressId: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        specificAllowedEmailAddressGetWithRequestBuilder(emailAddressId: emailAddressId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get specific email address
     - GET /email/addresses/{email_address_id}
     - Get specific email address
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emailAddressId: (path) Allowed email address id 

     - returns: RequestBuilder<String> 
     */
    open class func specificAllowedEmailAddressGetWithRequestBuilder(emailAddressId: Int) -> RequestBuilder<String> {
        var path = "/email/addresses/{email_address_id}"
        let emailAddressIdPreEscape = "\(emailAddressId)"
        let emailAddressIdPostEscape = emailAddressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email_address_id}", with: emailAddressIdPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Verify email address using verification token
     
     - parameter emailAddressId: (path) Allowed email address id 
     - parameter activationToken: (path) Your activation token. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func verifyAllowedEmailAddressGet(emailAddressId: Int, activationToken: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        verifyAllowedEmailAddressGetWithRequestBuilder(emailAddressId: emailAddressId, activationToken: activationToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Verify email address using verification token
     - PUT /email/address-verify/{email_address_id}/verify/{activation_token}
     - Verify email address using verification token
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter emailAddressId: (path) Allowed email address id 
     - parameter activationToken: (path) Your activation token. 

     - returns: RequestBuilder<String> 
     */
    open class func verifyAllowedEmailAddressGetWithRequestBuilder(emailAddressId: Int, activationToken: String) -> RequestBuilder<String> {
        var path = "/email/address-verify/{email_address_id}/verify/{activation_token}"
        let emailAddressIdPreEscape = "\(emailAddressId)"
        let emailAddressIdPostEscape = emailAddressIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email_address_id}", with: emailAddressIdPostEscape, options: .literal, range: nil)
        let activationTokenPreEscape = "\(activationToken)"
        let activationTokenPostEscape = activationTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{activation_token}", with: activationTokenPostEscape, options: .literal, range: nil)
        let URLString = ClickSendClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = ClickSendClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
