//
// AccountAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AccountAPI {
    /**
     Get account information
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        accountGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get account information
     - GET /account
     - Get account details
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<String> 
     */
    open class func accountGetWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/account"
        let URLString = SDKClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SDKClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a new account
     
     - parameter account: (body) Account model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountPost(account: Account, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        accountPostWithRequestBuilder(account: account).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a new account
     - POST /account
     - Create An Account
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter account: (body) Account model 

     - returns: RequestBuilder<String> 
     */
    open class func accountPostWithRequestBuilder(account: Account) -> RequestBuilder<String> {
        let path = "/account"
        let URLString = SDKClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: account)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SDKClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Send account activation token
     
     - parameter accountVerify: (body) Account details 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountVerifySendPut(accountVerify: AccountVerify, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        accountVerifySendPutWithRequestBuilder(accountVerify: accountVerify).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Send account activation token
     - PUT /account-verify/send
     - Send account activation token
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter accountVerify: (body) Account details 

     - returns: RequestBuilder<String> 
     */
    open class func accountVerifySendPutWithRequestBuilder(accountVerify: AccountVerify) -> RequestBuilder<String> {
        let path = "/account-verify/send"
        let URLString = SDKClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accountVerify)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SDKClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Verify new account
     
     - parameter activationToken: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func accountVerifyVerifyByActivationTokenPut(activationToken: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        accountVerifyVerifyByActivationTokenPutWithRequestBuilder(activationToken: activationToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Verify new account
     - PUT /account-verify/verify/{activation_token}
     - Verify new account
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter activationToken: (path)  

     - returns: RequestBuilder<String> 
     */
    open class func accountVerifyVerifyByActivationTokenPutWithRequestBuilder(activationToken: Int) -> RequestBuilder<String> {
        var path = "/account-verify/verify/{activation_token}"
        let activationTokenPreEscape = "\(activationToken)"
        let activationTokenPostEscape = activationTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{activation_token}", with: activationTokenPostEscape, options: .literal, range: nil)
        let URLString = SDKClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SDKClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Forgot password
     
     - parameter username: (form) Username belonging to account. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func forgotPasswordPut(username: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        forgotPasswordPutWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Forgot password
     - PUT /forgot-password
     - Forgot password
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter username: (form) Username belonging to account. 

     - returns: RequestBuilder<String> 
     */
    open class func forgotPasswordPutWithRequestBuilder(username: String) -> RequestBuilder<String> {
        let path = "/forgot-password"
        let URLString = SDKClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "username": username
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SDKClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Verify forgot password
     
     - parameter verifyPassword: (body) verifyPassword data 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func forgotPasswordVerifyPut(verifyPassword: AccountForgotPasswordVerify, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        forgotPasswordVerifyPutWithRequestBuilder(verifyPassword: verifyPassword).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Verify forgot password
     - PUT /forgot-password/verify
     - Verify forgot password
     - BASIC:
       - type: basic
       - name: BasicAuth
     - examples: [{contentType=application/json, example=""}]
     
     - parameter verifyPassword: (body) verifyPassword data 

     - returns: RequestBuilder<String> 
     */
    open class func forgotPasswordVerifyPutWithRequestBuilder(verifyPassword: AccountForgotPasswordVerify) -> RequestBuilder<String> {
        let path = "/forgot-password/verify"
        let URLString = SDKClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: verifyPassword)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SDKClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Forgot username
     
     - parameter email: (form) Email belonging to account. (optional)
     - parameter phoneNumber: (form) Phone number belonging to account. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func forgotUsernamePut(email: String? = nil, phoneNumber: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        forgotUsernamePutWithRequestBuilder(email: email, phoneNumber: phoneNumber).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Forgot username
     - PUT /forgot-username
     - Forgot username
     - examples: [{contentType=application/json, example=""}]
     
     - parameter email: (form) Email belonging to account. (optional)
     - parameter phoneNumber: (form) Phone number belonging to account. (optional)

     - returns: RequestBuilder<String> 
     */
    open class func forgotUsernamePutWithRequestBuilder(email: String? = nil, phoneNumber: String? = nil) -> RequestBuilder<String> {
        let path = "/forgot-username"
        let URLString = SDKClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "email": email,
            "phone_number": phoneNumber
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SDKClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
